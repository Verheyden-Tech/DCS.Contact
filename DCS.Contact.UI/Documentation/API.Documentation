<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DCS.Contact.UI</name>
    </assembly>
    <members>
        <member name="T:DCS.Contact.UI.CompanyViewModel">
            <summary>
            ViewModel for company instances.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.CompanyViewModel.#ctor(DCS.Contact.Company)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.CompanyViewModel"/> class.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:DCS.Contact.UI.CompanyViewModel.CreateNewCompany">
            <summary>
            Creates a new company based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>
            This method generates a new company using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the company service. If the operation
            succeeds, the new company is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if the new company is successfully created and added to the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.CompanyViewModel.UpdateCompany">
            <summary>
            Updates the company information in the service based on the current model.
            </summary>
            <remarks>
            This method attempts to update an existing company in the service using the data from
            the current model. If the company does not exist, it attempts to create a new company. Logs are generated for any
            errors or exceptional conditions encountered during the operation.
            </remarks>
            <returns><see langword="true"/> if the company was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.Contact.UI.CompanyViewModel.Guid">
            <summary>
            Gets or sets the unique identifier of the company.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.CompanyViewModel.Name">
            <summary>
            Gets or sets the name of the company.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.CompanyViewModel.Description">
            <summary>
            Gets or sets the description associated with the company.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.CompanyViewModel.Type">
            <summary>
            Gets or sets the type of the company.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.CompanyViewModel.IsActive">
            <summary>
            Indicates whether the company is active.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.ContactManagementViewModel">
            <summary>
            ViewModel for contact management.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.ContactManagementViewModel.#ctor(DCS.Contact.Contact)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.ContactManagementViewModel"/> class.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactManagementViewModel.Guid">
            <summary>
            Gets or sets the contact's guid.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactManagementViewModel.FirstName">
            <summary>
            Gets or sets the contact's first name.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactManagementViewModel.LastName">
            <summary>
            Gets or sets the contact's last name.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactManagementViewModel.IsActive">
            <summary>
            Indicates if the contact is active.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.ContactViewModel">
            <summary>
            ViewModel for contact instances.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.#ctor(DCS.Contact.Contact)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.ContactViewModel"/> class.
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.CreateNewContact">
            <summary>
            Creates a new contact based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>
            This method generates a new contact using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the contact service. If the operation
            succeeds, the new contact is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if the new contact is successfully created and added to the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.UpdateContact">
            <summary>
            Updates the contact information in the service based on the current model.
            </summary>
            <remarks>
            This method attempts to update an existing contact in the service using the data from
            the current model. If the contact does not exist, it attempts to create a new contact. Logs are generated for any
            errors or exceptional conditions encountered during the operation.
            </remarks>
            <returns><see langword="true"/> if the contact was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.DeleteContact">
            <summary>
            Deletes the current contact from the database and removes it from the collection.
            </summary>
            <remarks>This method attempts to delete the contact represented by the current <see
            cref="!:Model"/> from the database. If the contact is successfully deleted, it is also removed from the <see
            cref="!:Collection"/>. If the contact does not exist in the database, or if an error occurs during the
            deletion process, the method logs the error and returns <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the contact was successfully deleted from the database and removed from the
            collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.AddEmailToContact(DCS.Contact.Email)">
            <summary>
            Adds an email to the contact's email collection.
            </summary>
            <param name="email">The email to add.</param>
            <returns>True if the email was added successfully, otherwise false.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.RemoveEmailFromContact(DCS.Contact.Email)">
            <summary>
            Removes an email from the contact's email collection.
            </summary>
            <param name="email">The email to remove.</param>
            <returns>True if the email was removed successfully, otherwise false.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.AddPhoneToContact(DCS.Contact.Phone)">
            <summary>
            Adds a phone number to the contact's phone collection.
            </summary>
            <param name="phone">The phone number to add.</param>
            <returns>True if the phone number was added successfully, otherwise false.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactViewModel.RemovePhoneFromContact(DCS.Contact.Phone)">
            <summary>
            Removes a phone number from the contact's phone collection.
            </summary>
            <param name="phone">The phone number to remove.</param>
            <returns>True if the phone number was removed successfully, otherwise false.</returns>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.Guid">
            <summary>
            Gets or sets the unique identifier of the contact.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.FirstName">
            <summary>
            Gets or sets the first name of the contact.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.LastName">
            <summary>
            Gets or sets the last name of the contact.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ProfilePicturePath">
            <summary>
            Gets or sets the path to the profile picture of the contact.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.IsActive">
            <summary>
            Indicates whether the contact is active.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ContactStreetName">
            <summary>
            Gets or sets the street name of the contact's address.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ContactHouseNumber">
            <summary>
            Gets or sets the house number associated with the contact's address.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ContactCity">
            <summary>
            Gets or sets the city associated with the contact's address.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ContactPostalCode">
            <summary>
            Gets or sets the postal code associated with the contact's address.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.ContactCountry">
            <summary>
            Gets or sets the country associated with the contact's address.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.Emails">
            <summary>
            Gets or sets the collection of emails associated with the contact.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.ContactViewModel.Phones">
            <summary>
            Gets or sets the collection of phone numbers associated with the contact.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.EmailAdressViewModel">
            <summary>
            ViewModel for EmailAdress.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.EmailAdressViewModel.#ctor(DCS.Contact.Email)">
            <summary>
            Constructor for EmailAdressViewModel.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.EmailAdressViewModel.CreateNewEmail">
            <summary>
            Creates a new email based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>
            This method generates a new email using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the email address service. If the operation
            succeeds, the new email is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if the new email is successfully created and added to the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.EmailAdressViewModel.UpdateEmail">
            <summary>
            Updates the email information in the service based on the current model.
            </summary>
            <remarks>
            This method attempts to update an existing email in the service using the data from
            the current model. If the email does not exist, it attempts to create a new email. Logs are generated for any
            errors or exceptional conditions encountered during the operation.
            </remarks>
            <returns><see langword="true"/> if the email was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.Contact.UI.EmailAdressViewModel.Guid">
            <summary>
            Gets or sets the guid of a email adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.EmailAdressViewModel.Type">
            <summary>
            Gets or sets the type of a email adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.EmailAdressViewModel.MailAdress">
            <summary>
            Gets or sets the mail adress.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.PhoneNumberViewModel">
            <summary>
            ViewModel for phone numbers.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.PhoneNumberViewModel.#ctor(DCS.Contact.Phone)">
            <summary>
            Constructor for PhoneNumberViewModel.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.PhoneNumberViewModel.CreateNewPhone">
            <summary>
            Creates a new phone number based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>
            This method generates a new phone number using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the phone service. If the operation
            succeeds, the new phone number is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if the new phone number is successfully created and added to the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.PhoneNumberViewModel.UpdatePhone">
            <summary>
            Updates the phone number information in the service based on the current model.
            </summary>
            <remarks>
            This method attempts to update an existing phone number in the service using the data from
            the current model. If the phone number does not exist, it attempts to create a new one. Logs are generated for any
            errors or exceptional conditions encountered during the operation.
            </remarks>
            <returns><see langword="true"/> if the phone number was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.Contact.UI.PhoneNumberViewModel.Guid">
            <summary>
            Gets or sets the guid of a phone number.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhoneNumberViewModel.Type">
            <summary>
            Gets or sets the type of a phone number.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhoneNumberViewModel.PhoneNumber">
            <summary>
            Gets or sets the phone number.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.PhysicalAdressViewModel">
            <summary>
            ViewModel for physical adresses.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.PhysicalAdressViewModel.#ctor(DCS.Contact.Adress)">
            <summary>
            Constructor for PhysicalAdressViewModel.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.PhysicalAdressViewModel.CreateNewAdress">
            <summary>
            Creates a new address based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>
            This method generates a new address using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the physical address service. If the operation
            succeeds, the new address is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if the new address is successfully created and added to the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.PhysicalAdressViewModel.UpdateAdress">
            <summary>
            Updates the address information in the service based on the current model.
            </summary>
            <remarks>
            This method attempts to update an existing address in the service using the data from
            the current model. If the address does not exist, it attempts to create a new one. Logs are generated for any
            errors or exceptional conditions encountered during the operation.
            </remarks>
            <returns><see langword="true"/> if the address was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.Guid">
            <summary>
            Gets or sets the guid of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.StreetName">
            <summary>
            Gets or sets the street name of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.HouseNumber">
            <summary>
            Gets or sets the house number of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.AddressAddon">
            <summary>
            Gets or sets the adress suffix of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.PostalCode">
            <summary>
            Gets or sets the postal code of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.City">
            <summary>
            Gets or sets the city of a adress.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.PhysicalAdressViewModel.Country">
            <summary>
            Gets or sets the country of a adress.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.TypeViewModel">
            <summary>
            Represents a view model for a <see cref="T:DCS.Contact.Type"/> object, providing data binding and notification support for its
            properties.
            </summary>
            <remarks>This class extends <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> to provide a strongly-typed view
            model for <see cref="T:DCS.Contact.Type"/> objects. It exposes key properties of the underlying <see cref="T:DCS.Contact.Type"/> model, such
            as <see cref="P:DCS.Contact.UI.TypeViewModel.Guid"/>, <see cref="P:DCS.Contact.UI.TypeViewModel.Name"/>, and <see cref="P:DCS.Contact.UI.TypeViewModel.IsActive"/>, and raises property change notifications
            when these properties are updated.</remarks>
        </member>
        <member name="M:DCS.Contact.UI.TypeViewModel.#ctor(DCS.Contact.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.TypeViewModel"/> class using the specified <see cref="T:DCS.Contact.Type"/>.
            </summary>
            <param name="type">The <see cref="T:DCS.Contact.Type"/> that this view model represents. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.Contact.UI.TypeViewModel.CreateNewType">
            <summary>
            Creates a new type based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>This method generates a new type using the properties of the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>
            object, assigns it a unique identifier, and attempts to save it using the type service. If the operation
            succeeds, the new type is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> is null or an
            exception occurs during the operation, the method logs an error and returns <see
            langword="false"/>.</remarks>
            <returns><see langword="true"/> if the new type is successfully created and added to the collection; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.Contact.UI.TypeViewModel.UpdateType">
            <summary>
            Updates the type information in the service based on the current model.
            </summary>
            <remarks>This method attempts to update an existing type in the service using the data from
            the current model. If the type does not exist, it attempts to create a new type. Logs are generated for any
            errors or exceptional conditions encountered during the operation.</remarks>
            <returns><see langword="true"/> if the type was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.Contact.UI.TypeViewModel.Guid">
            <summary>
            Gets or sets the unique identifier associated with the type.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.TypeViewModel.Name">
            <summary>
            Gets or sets the name associated with the type.
            </summary>
        </member>
        <member name="P:DCS.Contact.UI.TypeViewModel.IsActive">
            <summary>
            Gets or sets a value indicating whether the current type is active.
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.ContactEditor">
            <summary>
            Interaction logic for ContactEditor.xaml
            </summary>
            <summary>
            ContactEditor
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.ContactEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.ContactEditor"/> class.
            </summary>
            <remarks>This constructor sets up the data context for the contact editor and initializes the
            contact's email addresses and phone numbers based on existing assignments. It also configures the UI
            visibility for email and phone number fields based on the contact's data.</remarks>
        </member>
        <member name="P:DCS.Contact.UI.ContactEditor.Current">
            <summary>
            Gets the current contact view model as data context.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.ContactEditor.PopulateCountryList">
            <summary>
            Retrieves a collection of distinct country names in English, sorted in descending order.
            </summary>
            <remarks>The method gathers country names based on specific cultures available in the system.
            The returned collection is distinct and sorted in descending alphabetical order.</remarks>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of strings containing the English names of countries. If no
            countries are found, an empty collection is returned.</returns>
        </member>
        <member name="M:DCS.Contact.UI.ContactEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.ContactManagement">
            <summary>
            Interaction logic for ContactManagement.xaml
            </summary>
            <summary>
            ContactManagement
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.ContactManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.ContactManagement"/> class.
            </summary>
            <remarks>This constructor initializes the data context for the view model and populates
            collections of contact addresses and phone numbers associated with the contact. It also sets the first
            available address and phone number as the default display values.  The constructor retrieves contact
            assignments from the <c>contactAssignementService</c> and uses the <c>contactAdressService</c> and
            <c>phoneService</c> to fetch detailed address and phone information.</remarks>
        </member>
        <member name="M:DCS.Contact.UI.ContactManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.EmailAdressEditor">
            <summary>
            Interaction logic for EmailAdressEditor.xaml
            </summary>
            <summary>
            EmailAdressEditor
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.EmailAdressEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.EmailAdressEditor"/> class.
            </summary>
            <remarks>This constructor sets up the necessary components for the <see
            cref="T:DCS.Contact.UI.EmailAdressEditor"/>. Ensure that the required dependencies are properly configured before using this
            editor.</remarks>
        </member>
        <member name="M:DCS.Contact.UI.EmailAdressEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.Contact.UI.TypeEditor">
            <summary>
            Interaction logic for TypeEditor.xaml
            </summary>
            <summary>
            TypeEditor
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.TypeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.Contact.UI.TypeEditor"/> class.
            </summary>
            <remarks>This constructor sets up the <see cref="T:DCS.Contact.UI.TypeEditor"/> by initializing its components,
            creating a new instance of the <see cref="T:DCS.Contact.Type"/> class, and associating a  <see cref="T:DCS.Contact.UI.TypeViewModel"/> with
            the editor's data context.</remarks>
        </member>
        <member name="P:DCS.Contact.UI.TypeEditor.Current">
            <summary>
            Gets the current <see cref="T:DCS.Contact.UI.TypeViewModel"/> instance as data context.
            </summary>
        </member>
        <member name="M:DCS.Contact.UI.TypeEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
